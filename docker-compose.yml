version: '3.9'

services:
  api:
    container_name: api
    env_file:
      - .env
    networks:
      - app-network
    # network_mode: bridge
    depends_on:
      - db
    build:
      context: .
      dockerfile: Dockerfile
    # volumes:
    #   - ./:/go/src/app
    ports:
      - 8080:8080
    environment:
      - ENV=production
      - PORT=${PORT}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
    restart: on-failure

  db:
    container_name: postgres
    image: postgres:16.3
    env_file:
      - .env
    networks:
      - app-network
    # network_mode: bridge
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./sql/populate_products.sql:/docker-entrypoint-initdb.d/populate_products.sql
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - PGUSER=${DATABASE_USER}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
      - PG_DATA=/var/lib/postgresql/data
    logging:
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DATABASE_NAME} -U ${DATABASE_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always

networks:
  app-network: {}

volumes:
  pgdata:
    driver: local
